# docker-compose -p bus_park_services_package --env-file docker.env up
version: '3.8'

services:
  grafana:
    build: './config/grafana'
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus

  redis_container:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"

  zookeeper_container:
    image: wurstmeister/zookeeper
    container_name: zookeeper_container
    ports:
      - "22181:2181"

  kafka_container:
    image: wurstmeister/kafka
    container_name: kafka_container
    depends_on:
      - zookeeper_container
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper_container:2181
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_container:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CREATE_TOPICS: "${KAFKA_PATHS_BUSES_TOPIC}:3:1, ${KAFKA_BUSES_PATHS_TOPIC}:3:1, ${KAFKA_SCHEDULE_FROM_LOG_TOPIC}:3:1, ${KAFKA_SCHEDULE_FROM_DRIVERS_TOPIC}:3:1"

  api_gateway_service_db:
    image: postgres:latest
    container_name: api_gateway_service_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${API_GATEWAY_DB_NAME}
    ports:
      - "${API_GATEWAY_DB_PORT}:5432"

  buses_drivers_service_db:
    image: postgres:latest
    container_name: buses_drivers_service_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${BUSES_DRIVERS_DB_NAME}
    ports:
      - "${BUSES_DRIVERS_DB_PORT}:5432"

  paths_stations_service_db:
    image: postgres:latest
    container_name: paths_stations_service_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${PATHS_STATIONS_DB_NAME}
    ports:
      - "${PATHS_STATIONS_DB_PORT}:5432"

  schedule_service_db:
    image: postgres:latest
    container_name: schedule_service_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${SCHEDULE_DB_NAME}
    ports:
      - "${SCHEDULE_DB_PORT}:5432"

  paths_stations_service_app:
    build:
      context: ./paths_stations_module
      dockerfile: Dockerfile
    container_name: paths_stations_service_app
    env_file: docker.env
    depends_on:
      redis_container:
        condition: service_started
      kafka_container:
        condition: service_started
      paths_stations_service_db:
        condition: service_healthy
    ports:
      - "${PATHS_STATIONS_SERVICE_PORT}:${PATHS_STATIONS_SERVICE_PORT}"
    command:
      - java -jar app.jar

  buses_drivers_service_app:
    build:
      context: ./buses_drivers_module
      dockerfile: Dockerfile
    container_name: buses_drivers_service_app
    env_file: docker.env
    depends_on:
      redis_container:
        condition: service_started
      kafka_container:
        condition: service_started
      buses_drivers_service_db:
        condition: service_healthy
      paths_stations_service_app:
        condition: service_started
    ports:
      - "${BUSES_DRIVERS_SERVICE_PORT}:${BUSES_DRIVERS_SERVICE_PORT}"
    command:
      - java -jar app.jar

  schedule_service_app:
    build:
      context: ./schedule_service_module
      dockerfile: Dockerfile
    container_name: schedule_service_app
    env_file: docker.env
    depends_on:
      redis_container:
        condition: service_started
      kafka_container:
        condition: service_started
      schedule_service_db:
        condition: service_healthy
      buses_drivers_service_app:
        condition: service_started
    ports:
      - "${SCHEDULE_SERVICE_PORT}:${SCHEDULE_SERVICE_PORT}"
    command:
      - java -jar app.jar

  api_gateway_service_app:
    build:
      context: ./api_gateway_module
      dockerfile: Dockerfile
    container_name: api_gateway_service_app
    env_file: docker.env
    depends_on:
      api_gateway_service_db:
        condition: service_healthy
      paths_stations_service_app:
        condition: service_started
      buses_drivers_service_app:
        condition: service_started
      schedule_service_app:
        condition: service_started
    ports:
      - "${API_GATEWAY_SERVICE_PORT}:${API_GATEWAY_SERVICE_PORT}"
    command:
      - java -jar app.jar